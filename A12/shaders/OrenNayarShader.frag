#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(binding = 1) uniform sampler2D tex;layout(binding = 2) uniform GlobalUniformBufferObject {	vec3 lightDir;	vec4 lightColor;	vec3 eyePos;} gubo;vec3 BRDF(vec3 V, vec3 N, vec3 L, vec3 Md, float sigma) {	//vec3 V  - direction of the viewer [aka OmegaR]	//vec3 N  - normal vector to the surface	//vec3 L  - light vector (from the light model) [aka d]	//vec3 Md - main color of the surface	//float sigma - Roughness of the model	// use long computation page 53 slides L15	float lAlongN = dot(L, N);	float vAlongN = dot(V, N);	float tetaI = acos(lAlongN);	float tetaR = acos(vAlongN);	float alpha = max(tetaI, tetaR);	float beta = min(tetaI, tetaR);	float sigma2 = pow(sigma, 2.0);	float A = 1 - 0.5 * sigma2 / (sigma2 + 0.33);	float B = 0.45 * sigma2 / (sigma2 + 0.09);	vec3 vI = normalize(L - lAlongN * N);	vec3 vR = normalize(V - vAlongN * N);	float G = max(0, dot(vI, vR));	vec3 LightDir = Md * clamp(lAlongN, 0.0, 1.0);	return LightDir * (A + B * G * sin(alpha) * tan(beta));}void main() {	vec3 Norm = normalize(fragNorm);	vec3 EyeDir = normalize(gubo.eyePos - fragPos);		vec3 lightDir = gubo.lightDir;	vec3 lightColor = gubo.lightColor.rgb;	vec3 DiffSpec = BRDF(EyeDir, Norm, lightDir, texture(tex, fragUV).rgb, 1.1f);	vec3 Ambient = texture(tex, fragUV).rgb * 0.05f;		outColor = vec4(clamp(0.95 * (DiffSpec) * lightColor.rgb + Ambient,0.0,1.0), 1.0f);}